//hedgehog-engine build.gradle

buildscript {
  ext {
    springBootVersion = '2.0.4.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath 'org.liquibase:liquibase-core:3.5.3'
    classpath 'org.postgresql:postgresql:42.1.4'
  }
}

plugins {
  id "org.sonarqube" version "2.5"
  id 'org.liquibase.gradle' version '1.2.4'
  id 'io.franzbecker.gradle-lombok' version '1.11'
}

repositories {
  mavenCentral()
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply plugin: 'jacoco'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  verify {
    java {
      compileClasspath += main.output + main.compileClasspath
      compileClasspath += test.output + test.compileClasspath
      runtimeClasspath += test.runtimeClasspath
    }
    resources.srcDir file('src/verify/resources')
  }
}

dependencies {
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  compile 'org.springframework.boot:spring-boot-starter-data-rest'
  compile 'org.springframework.boot:spring-boot-starter-jdbc'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-actuator'
  //compile 'org.springframework.boot:spring-boot-starter-security'
  //compile("com.h2database:h2")
  //compile 'io.jsonwebtoken:jjwt:0.7.0'
  compile 'com.google.gag:gag:1.0.1'
//  compile 'org.liquibase:liquibase-core:3.5.3'
  compile 'org.hibernate:hibernate-java8:5.1.0.Final'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
  compile 'com.google.guava:guava:25.1-jre'
  compile "io.springfox:springfox-swagger2:2.9.2"
  compile 'io.springfox:springfox-swagger-ui:2.9.2'

  runtime 'com.h2database:h2'
  runtime 'org.postgresql:postgresql'
  runtime('org.springframework.boot:spring-boot-devtools')

  testCompile(
          'org.springframework.boot:spring-boot-starter-test',
          'org.codehaus.groovy:groovy-all:2.4.4',
          'org.spockframework:spock-core:1.0-groovy-2.4',
          'org.spockframework:spock-spring:1.0-groovy-2.4',

          // optional dependencies for using Spock
          "org.hamcrest:hamcrest-core:1.3", // only necessary if Hamcrest matchers are used
          "net.bytebuddy:byte-buddy:1.6.5", // allows mocking of classes (in addition to interfaces)
          "org.objenesis:objenesis:2.5.1", // allows mocking of classes without default constructor (together with CGLIB)
  )

  testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
  testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0'
  testCompile ('org.springframework.security:spring-security-test:5.0.0.RELEASE') {
    exclude group: 'junit', module: 'junit'
  }
  testCompile 'org.assertj:assertj-core:3.9.1'
  testCompile 'nl.jqno.equalsverifier:equalsverifier:2.3.3'

  testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

bootJar {
  dependsOn ':hedgehog-webapp:buildClient'

  into('BOOT-INF/classes/static') {
    from "${project(':hedgehog-webapp').projectDir}/dist"
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat = 'full'
    afterSuite {
      desc, result -> reportTestResults(desc, result)
    }
  }
  outputs.upToDateWhen { false }
  reports {
    html.enabled = true
  }
}

task verify(type: Test) {
  useJUnitPlatform()
  testClassesDirs = sourceSets.verify.output.classesDirs
  classpath = sourceSets.verify.runtimeClasspath
  outputs.upToDateWhen { false }
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat = 'full'
    afterSuite {
      desc, result -> reportTestResults(desc, result)
    }
  }
  reports {
    html.enabled = true
  }
}

check.dependsOn verify

private void reportTestResults(desc, result) {
  if (!desc.parent) { // will match the outermost suite
    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
  }
}

jacocoTestReport {
  reports {
    xml.enabled true
  }
  executionData test,verify
}

tasks.withType(Test) {
  jacoco {
    destinationFile = file("${buildDir}/jacoco/test.exec")
  }
}

task cleanJacoco(dependsOn: 'clean') {
  delete "${buildDir}/jacoco"
}

check.dependsOn jacocoTestReport

bootRun {
  systemProperties System.properties
}

task stage {
  dependsOn build
}

gradle.taskGraph.whenReady { graph ->
  if (graph.hasTask(stage)) {
    test.enabled = false
    verify.enabled = false
  }
}

sonarqube {
  properties {
    properties["sonar.tests"] += sourceSets.verify.allSource.srcDirs
  }
}
project.tasks['sonarqube'].dependsOn 'check'

idea {
  module {
    inheritOutputDirs = false
    outputDir = file(project.buildDir.toString() + '/classes/main/')
    testSourceDirs += file('verify')
//    testOutputDir file(project.buildDir.toString() + '/classes/test')
    testSourceDirs += project.sourceSets.verify.java.srcDirs
    testSourceDirs += project.sourceSets.verify.resources.srcDirs
  }
}

liquibase {
  activities {
    main {
      changeLogFile 'db/changelogs.xml'
      url 'jdbc:postgresql://localhost:5432/hedgehog-db'
      username 'postgres'
      password 'postgres'
    }
  }
}
